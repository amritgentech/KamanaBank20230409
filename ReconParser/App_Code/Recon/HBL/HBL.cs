using Db.Enum;
using Db.Model;
using iTextSharp.text.pdf;
using iTextSharp.text.pdf.parser;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace ReconParser.App_Code.Recon.HBL
{
    public class HBL : Base
    {
        public HBL(String FileName, int FileCount)
            : base(FileName,FileCount)
        {
            _Source = Source.FindName("HBL");
        }
        public override void Parse()
        {
            Console.WriteLine("Parsing File {0}", FileName);
            List<string> listString = ReadDataFromFile(FileName);

            GetTransactionList(listString);

            Console.WriteLine("Parsed File {0}", FileName);
        }

        public List<string> ReadDataFromFile(string fileName)
        {
            try
            {
                List<string> listStr = new List<string>();
                StringBuilder text = new StringBuilder();
                byte[] byteArray = Encoding.UTF8.GetBytes(fileName);
                MemoryStream stream = new MemoryStream(byteArray);
                StreamReader reader = new StreamReader(stream);
                string file = reader.ReadToEnd();
                PdfReader pdfReader = new PdfReader(file);
                for (int page = 1; page <= pdfReader.NumberOfPages; page++)
                {
                    text.Clear();
                    ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy();
                    string currentText = PdfTextExtractor.GetTextFromPage(pdfReader, page, strategy);
                    text.Append(System.Environment.NewLine);
                    text.Append("\n Page Number:" + page);
                    text.Append(System.Environment.NewLine);
                    currentText = Encoding.UTF8.GetString(ASCIIEncoding.Convert(Encoding.Default, Encoding.UTF8, Encoding.Default.GetBytes(currentText)));
                    text.Append(currentText);
                    char pageno = (char)(((int)'0') + page);
                    string txt = text.ToString();
                    txt = Regex.Replace(txt, @"^\s+$[\r\n]*", "", RegexOptions.Multiline);
                    string a = page.ToString();
                    string[] lst = txt.TrimStart(' ').Split(new Char[] { '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    //string[] lst = txt.TrimStart(' ').TrimEnd(pageno).Split(new Char[] { '\r' }, StringSplitOptions.RemoveEmptyEntries);
                    string lst1 = string.Join("‡", lst.ToArray());
                    string[] lst2 = lst1.TrimEnd('‡').Split('‡');
                    if (page == 1)
                    {
                        listStr.Add(lst2[3]);
                        for (int i = 12; i < lst2.Length; i++)
                        {
                            if (lst2[i].Contains("Amount") || lst2[i].Contains("Summary") || lst2[i].Contains("Page") || lst2[i].Contains("Per") ||
                                lst2[i].Contains("Total") || lst2[i].Contains("Msg Type Tran Date Tran Amount Reference No Auth No Termid") ||
                                lst2[i].Contains("Pan") || lst2[i].Contains("Page") || lst2[i].Contains("Summary") ||
                                lst2[i].Contains("Original Transaction") || lst2[i].Contains("Total For") ||
                                lst2[i].Contains("Other Bank Cards on Your Terminals") || lst2[i].Contains("Generated By") || lst2[i].Contains("BRANCH :") ||
                                lst2[i].Contains("Your Bank Cards on HBL Terminals") ||
                                lst2[i].Contains("MSG PAN AMOUNT AUTHNUM REFNUM TERMID COMM PAID  TRANDATE") || lst2[i].Contains("DATE      :") ||
                                lst2[i].Contains("A C C O U N T MO V E ME N T A D V I C E") || lst2[i].Length == 1)
                            {
                            }
                            else
                            {
                                listStr.Add(lst2[i]);
                            }
                        }
                    }
                    else
                    {
                        for (int i = 0; i < lst2.Length; i++)
                        {
                            if (lst2[i].Contains("Amount") || lst2[i].Contains("Summary") || lst2[i].Contains("Page") || lst2[i].Contains("Per") ||
                                lst2[i].Contains("Total") || lst2[i].Contains("Msg Type Tran Date Tran Amount Reference No Auth No Termid") ||
                                lst2[i].Contains("Pan") || lst2[i].Contains("Page") || lst2[i].Contains("Summary") ||
                                lst2[i].Contains("Original Transaction") || lst2[i].Contains("Total For") ||
                                lst2[i].Contains("Other Bank Cards on Your Terminals") || lst2[i].Contains("Generated By") || lst2[i].Contains("BRANCH :") ||
                                lst2[i].Contains("Your Bank Cards on HBL Terminals") ||
                                lst2[i].Contains("MSG PAN AMOUNT AUTHNUM REFNUM TERMID COMM PAID  TRANDATE") || lst2[i].Contains("DATE      :") ||
                                lst2[i].Contains("A C C O U N T MO V E ME N T A D V I C E") || lst2[i].Length == 1)
                            {
                            }
                            else
                            {
                                listStr.Add(lst2[i]);
                            }
                        }
                    }
                }
                return listStr;
            }
            catch
            {
                return new List<string>();
            }
        }

        public void GetTransactionList(List<string> listStr)
        {
            DateTimeFormatInfo dateFormatInfo = new DateTimeFormatInfo();
            dateFormatInfo.ShortDatePattern = @"dd-MMM-yyyy";

            Transaction _Transaction = null;
            string EODdate = "";
            foreach (string str in listStr)
            {
                try
                {
                    TransactionType _TransactionType = TransactionType.BalInquiry;
                    TransactionStatus _TransactionStatus = TransactionStatus.Success;
                    CardType _CardType = CardType.NotDefine;
                    NetworkType _NetworkType = NetworkType.HBL;
                    TerminalType _TerminalType = TerminalType.ATM;
                    TerminalOwner _TerminalOwner = TerminalOwner.NotDefine;

                    string[] eliminateData = str.Split(' ');
                    if (str.Contains("DATE"))
                    {
                        EODdate = eliminateData[eliminateData.Length - 1];
                    }
                    else
                    {
                        _Transaction = new Transaction();
                        string stringDate = eliminateData[8];
                        _Transaction.TransactionDate = Convert.ToDateTime(stringDate, dateFormatInfo);

                        if (str.Contains("BOK"))
                        {
                            _Transaction.CardNo = eliminateData[7];
                            _Transaction.ReferenceNo = eliminateData[4];
                            _Transaction.AuthCode = eliminateData[3];
                            _Transaction.TerminalId = eliminateData[5];
                            string[] amount = eliminateData[2].Split('.');
                            string amount1 = amount[1] + "." + amount[2];
                            _Transaction.TransactionAmount = decimal.Parse(amount1);

                            _TerminalOwner = TerminalOwner.OwnTerminal;
                            _TerminalType = TerminalType.ATM;
                            _CardType = CardType.OffUsCard;
                        }
                        else
                        {
                            _Transaction.CardNo = eliminateData[2];
                            _Transaction.ReferenceNo = eliminateData[5];
                            _Transaction.AuthCode = eliminateData[4];
                            _Transaction.TerminalId = eliminateData[6];
                            string[] amount = eliminateData[3].Split('.');
                            string amount1 = amount[1] + "." + amount[2];
                            _Transaction.TransactionAmount = decimal.Parse(amount1);

                            _TerminalOwner = TerminalOwner.OffUsTerminal;
                            _TerminalType = TerminalType.ATM;
                            _CardType = CardType.OwnCard;
                            if (str.Contains("HBHB"))
                            {
                                _TerminalType = TerminalType.ATM;
                            }
                            else
                            {
                                _TerminalType = TerminalType.POS;
                            }
                        }

                        if (_Transaction.TransactionAmount == 0)
                        {
                            _TransactionType = TransactionType.BalInquiry;
                        }
                        else
                        {
                            _TransactionType = TransactionType.Financial;
                        }
                        string traceno = _Transaction.ReferenceNo.Substring(6, 6);
                        _Transaction.TraceNo = traceno;
                        _Transaction.ResponseCode = GetResponseCode("0000");

                        _Transaction.AdviseDate = Convert.ToDateTime(EODdate, dateFormatInfo);

                    }
                    if (_Transaction != null)
                    {
                        _Transaction = GetTransaction(_Transaction, _TransactionType, _TransactionStatus, _TerminalType, _CardType, _TerminalOwner, _NetworkType);
                        Transactions.Add(_Transaction);
                    }
                }
                catch
                {
                    throw;
                }
            }
        }
    }
}
